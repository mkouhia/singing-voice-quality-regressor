params:
  - params.yaml
stages:
  clean:
    desc: Clean input dataframes of invalid data
    cmd: python -m singing_classifier.clean
      --data SVQTD/test.csv SVQTD/train.csv SVQTD/dev.csv
      --data-out data/test_clean.parquet data/train_clean.parquet data/dev_clean.parquet
      -- SVQTD/seg_time_lists.csv data/segments_clean.parquet
    deps:
    - SVQTD/seg_time_lists.csv
    - SVQTD/test.csv
    - SVQTD/train.csv
    - SVQTD/dev.csv
    - singing_classifier/clean.py
    outs:
    - data/segments_clean.parquet
    - data/test_clean.parquet
    - data/train_clean.parquet
    - data/dev_clean.parquet
  etl:
    desc: YouTube audio extraction, transformation and loading
    cmd: python -m singing_classifier.etl
      --download-summary data/etl_audio_summary.parquet
      --split-summary data/etl_segment_summary.parquet
      data/segments_clean.parquet data/audio_raw data/audio_segments
    deps:
    - data/segments_clean.parquet
    - singing_classifier/etl.py
    outs:
    - data/audio_segments:
        persist: true
    - data/etl_audio_summary.parquet
    - data/etl_segment_summary.parquet
  filter:
    foreach:
      segments:
        data: data/segments_clean.parquet
        out: data/segments_filter.parquet
        num-col: num
      test:
        data: data/test_clean.parquet
        out: data/test_filter.parquet
        num-col: seg_num
      train:
        data: data/train_clean.parquet
        out: data/train_filter.parquet
        num-col: seg_num
      dev:
        data: data/dev_clean.parquet
        out: data/dev_filter.parquet
        num-col: seg_num
    do:
      cmd: python -m singing_classifier.filter
        --num-col ${item.num-col}
        data/etl_segment_summary.parquet ${item.data} ${item.out}
      deps:
      - data/etl_segment_summary.parquet
      - ${item.data}
      - singing_classifier/filter.py
      outs:
      - ${item.out}
  train:
    foreach: ${models.targets}
    do:
      cmd: python -m singing_classifier.train
        --epochs ${nn.epochs}
        --sample-rate ${nn.mel-spectrogram.sample-rate}
        --batch-duration-ms ${nn.batch.audio-length-ms}
        --batch-size ${nn.batch.size}
        --n-fft ${nn.mel-spectrogram.n-fft}
        --train data/train_filter.parquet
        --valid data/dev_filter.parquet
        --segment_summary data/etl_segment_summary.parquet
        --metrics metrics/valid/${item}.json
        --lr-plot plots/lr_${item}.png
        --loss-plot plots/loss_${item}.png
        ${item}
        models/${item}.pkl
      deps:
        - data/train_filter.parquet
        - data/dev_filter.parquet
        - data/etl_segment_summary.parquet
        - singing_classifier/train.py
      params:
        - nn.epochs
        - nn.mel-spectrogram.sample-rate
        - nn.mel-spectrogram.n-fft
        - nn.batch.audio-length-ms
        - nn.batch.size
      outs:
        - models/${item}.pkl
      metrics:
        - metrics/valid/${item}.json:
            cache: false
      plots:
        - plots/lr_${item}.png
        - plots/loss_${item}.png
